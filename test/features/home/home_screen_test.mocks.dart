// Mocks generated by Mockito 5.4.6 from annotations
// in apati_paseo_perro/test/features/home/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:apati_paseo_perro/features/walks/data/services/database_service.dart'
    as _i4;
import 'package:apati_paseo_perro/features/walks/domain/models/walk_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWalk_1 extends _i1.SmartFake implements _i3.Walk {
  _FakeWalk_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i4.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i2.Database>);

  @override
  _i5.Future<_i3.Walk> create(_i3.Walk? walk) =>
      (super.noSuchMethod(
            Invocation.method(#create, [walk]),
            returnValue: _i5.Future<_i3.Walk>.value(
              _FakeWalk_1(this, Invocation.method(#create, [walk])),
            ),
          )
          as _i5.Future<_i3.Walk>);

  @override
  _i5.Future<_i3.Walk> read(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#read, [id]),
            returnValue: _i5.Future<_i3.Walk>.value(
              _FakeWalk_1(this, Invocation.method(#read, [id])),
            ),
          )
          as _i5.Future<_i3.Walk>);

  @override
  _i5.Future<List<_i3.Walk>> readAll() =>
      (super.noSuchMethod(
            Invocation.method(#readAll, []),
            returnValue: _i5.Future<List<_i3.Walk>>.value(<_i3.Walk>[]),
          )
          as _i5.Future<List<_i3.Walk>>);

  @override
  _i5.Future<int> update(_i3.Walk? walk) =>
      (super.noSuchMethod(
            Invocation.method(#update, [walk]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<dynamic> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<dynamic>.value(),
          )
          as _i5.Future<dynamic>);
}
